"use strict";

function _typeof(t) {
    function i(t) {
        return e.apply(this, arguments)
    }
    var e, n;

    function a(t) {
        return n.apply(this, arguments)
    }
    return (_typeof = "function" == typeof Symbol && "symbol" === _typeof(Symbol.iterator) ? (n = function (t) {
        return void 0 === t ? "undefined" : _typeof(t)
    }, a.toString = function () {
        return n.toString()
    }, a) : (e = function (t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : void 0 === t ? "undefined" : _typeof(t)
    }, i.toString = function () {
        return e.toString()
    }, i))(t)
}! function (i) {
    "function" == typeof define && define.amd ? define(["jquery"], function (t) {
        i(t, window, document)
    }) : i(jQuery, window, document)
}(function (s, l, t, o) {
    var r = "intlTelInput",
        e = 1,
        n = {
            allowExtensions: !1,
            autoFormat: !0,
            autoHideDialCode: !0,
            autoPlaceholder: !0,
            defaultCountry: "",
            geoIpLookup: null,
            nationalMode: !0,
            numberType: "MOBILE",
            onlyCountries: [],
            preferredCountries: ["us", "gb"],
            utilsScript: ""
        },
        u = 38,
        h = 40,
        d = 13,
        c = 27,
        p = 43,
        f = 65,
        g = 90,
        y = 48,
        m = 57,
        C = 32,
        a = 8,
        v = 9,
        I = 46,
        i = !1;

    function b(t, i) {
        this.element = t, this.options = s.extend({}, n, i), this._defaults = n, this.ns = "." + r + e++, this.isGoodBrowser = Boolean(t.setSelectionRange), this.hadInitialPlaceholder = Boolean(s(t).attr("placeholder")), this._name = r
    }
    s(l).load(function () {
        i = !0
    }), b.prototype = {
        _init: function () {
            return this.options.nationalMode && (this.options.autoHideDialCode = !1), navigator.userAgent.match(/IEMobile/i) && (this.options.autoFormat = !1), this.isMobile = /Android.+Mobile|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), this.autoCountryDeferred = new s.Deferred, this.utilsScriptDeferred = new s.Deferred, this._processCountryData(), this._generateMarkup(), this._setInitialState(), this._initListeners(), this._initRequests(), [this.autoCountryDeferred, this.utilsScriptDeferred]
        },
        _processCountryData: function () {
            this._setInstanceCountryData(), this._setPreferredCountries()
        },
        _addCountryCode: function (t, i, e) {
            i in this.countryCodes || (this.countryCodes[i] = []);
            var n = e || 0;
            this.countryCodes[i][n] = t
        },
        _setInstanceCountryData: function () {
            var t;
            if (this.options.onlyCountries.length) {
                for (t = 0; t < this.options.onlyCountries.length; t++) this.options.onlyCountries[t] = this.options.onlyCountries[t].toLowerCase();
                for (this.countries = [], t = 0; t < _.length; t++) - 1 != s.inArray(_[t].iso2, this.options.onlyCountries) && this.countries.push(_[t])
            } else this.countries = _;
            for (this.countryCodes = {}, t = 0; t < this.countries.length; t++) {
                var i = this.countries[t];
                if (this._addCountryCode(i.iso2, i.dialCode, i.priority), i.areaCodes)
                    for (var e = 0; e < i.areaCodes.length; e++) this._addCountryCode(i.iso2, i.dialCode + i.areaCodes[e])
            }
        },
        _setPreferredCountries: function () {
            this.preferredCountries = [];
            for (var t = 0; t < this.options.preferredCountries.length; t++) {
                var i = this.options.preferredCountries[t].toLowerCase(),
                    e = this._getCountryData(i, !1, !0);
                e && this.preferredCountries.push(e)
            }
        },
        _generateMarkup: function () {
            this.telInput = s(this.element), this.telInput.attr("autocomplete", "off"), this.telInput.wrap(s("<div>", {
                class: "intl-tel-input"
            })), this.flagsContainer = s("<div>", {
                class: "flag-dropdown"
            }).insertBefore(this.telInput);
            var t = s("<div>", {
                tabindex: "0",
                class: "selected-flag"
            }).appendTo(this.flagsContainer);
            this.selectedFlagInner = s("<div>", {
                class: "iti-flag"
            }).appendTo(t), s("<div>", {
                class: "arrow"
            }).appendTo(t), this.isMobile ? this.countryList = s("<select>", {
                class: "iti-mobile-select"
            }).appendTo(this.flagsContainer) : (this.countryList = s("<ul>", {
                class: "country-list v-hide"
            }).appendTo(this.flagsContainer), this.preferredCountries.length && !this.isMobile && (this._appendListItems(this.preferredCountries, "preferred"), s("<li>", {
                class: "divider"
            }).appendTo(this.countryList))), this._appendListItems(this.countries, ""), this.isMobile || (this.dropdownHeight = this.countryList.outerHeight(), this.countryList.removeClass("v-hide").addClass("hide"), this.countryListItems = this.countryList.children(".country"))
        },
        _appendListItems: function (t, i) {
            for (var e = "", n = 0; n < t.length; n++) {
                var a = t[n];
                this.isMobile ? (e += "<option data-dial-code='" + a.dialCode + "' value='" + a.iso2 + "'>", e += a.name + " +" + a.dialCode, e += "</option>") : (e += "<li class='country " + i + "' data-dial-code='" + a.dialCode + "' data-country-code='" + a.iso2 + "'>", e += "<div class='flag'><div class='iti-flag " + a.iso2 + "'></div></div>", e += "<span class='country-name'>" + a.name + "</span>", e += "<span class='dial-code'>+" + a.dialCode + "</span>", e += "</li>")
            }
            this.countryList.append(e)
        },
        _setInitialState: function () {
            var t = this.telInput.val();
            this._getDialCode(t) ? this._updateFlagFromNumber(t, !0) : "auto" != this.options.defaultCountry && (this.options.defaultCountry ? this.options.defaultCountry = this._getCountryData(this.options.defaultCountry.toLowerCase(), !1, !1) : this.options.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0] : this.countries[0], this._selectFlag(this.options.defaultCountry.iso2), t || this._updateDialCode(this.options.defaultCountry.dialCode, !1)), t && this._updateVal(t)
        },
        _initListeners: function () {
            var i = this;
            if (this._initKeyListeners(), (this.options.autoHideDialCode || this.options.autoFormat) && this._initFocusListeners(), this.isMobile) this.countryList.on("change" + this.ns, function (t) {
                i._selectListItem(s(this).find("option:selected"))
            });
            else {
                var t = this.telInput.closest("label");
                t.length && t.on("click" + this.ns, function (t) {
                    i.countryList.hasClass("hide") ? i.telInput.focus() : t.preventDefault()
                }), this.selectedFlagInner.parent().on("click" + this.ns, function (t) {
                    !i.countryList.hasClass("hide") || i.telInput.prop("disabled") || i.telInput.prop("readonly") || i._showDropdown()
                })
            }
            this.flagsContainer.on("keydown" + i.ns, function (t) {
                !i.countryList.hasClass("hide") || t.which != u && t.which != h && t.which != C && t.which != d || (t.preventDefault(), t.stopPropagation(), i._showDropdown()), t.which == v && i._closeDropdown()
            })
        },
        _initRequests: function () {
            var t = this;
            this.options.utilsScript ? i ? this.loadUtils() : s(l).load(function () {
                t.loadUtils()
            }) : this.utilsScriptDeferred.resolve(), "auto" == this.options.defaultCountry ? this._loadAutoCountry() : this.autoCountryDeferred.resolve()
        },
        _loadAutoCountry: function () {
            var t = s.cookie ? s.cookie("itiAutoCountry") : "";
            t && (s.fn[r].autoCountry = t), s.fn[r].autoCountry ? this.autoCountryLoaded() : s.fn[r].startedLoadingAutoCountry || (s.fn[r].startedLoadingAutoCountry = !0, "function" == typeof this.options.geoIpLookup && this.options.geoIpLookup(function (t) {
                s.fn[r].autoCountry = t.toLowerCase(), s.cookie && s.cookie("itiAutoCountry", s.fn[r].autoCountry, {
                    path: "/"
                }), setTimeout(function () {
                    s(".intl-tel-input input").intlTelInput("autoCountryLoaded")
                })
            }))
        },
        _initKeyListeners: function () {
            var r = this;
            this.options.autoFormat && this.telInput.on("keypress" + this.ns, function (t) {
                if (t.which >= C && !t.ctrlKey && !t.metaKey && l.intlTelInputUtils && !r.telInput.prop("readonly")) {
                    t.preventDefault();
                    var i = t.which >= y && t.which <= m || t.which == p,
                        e = r.telInput[0],
                        n = r.isGoodBrowser && e.selectionStart == e.selectionEnd,
                        a = r.telInput.attr("maxlength"),
                        o = r.telInput.val();
                    if ((!a || o.length < a) && (i || n)) {
                        var s = i ? String.fromCharCode(t.which) : null;
                        r._handleInputKey(s, !0, i), o != r.telInput.val() && r.telInput.trigger("input")
                    }
                    i || r._handleInvalidKey()
                }
            }), this.telInput.on("cut" + this.ns + " paste" + this.ns, function () {
                setTimeout(function () {
                    if (r.options.autoFormat && l.intlTelInputUtils) {
                        var t = r.isGoodBrowser && r.telInput[0].selectionStart == r.telInput.val().length;
                        r._handleInputKey(null, t), r._ensurePlus()
                    } else r._updateFlagFromNumber(r.telInput.val())
                })
            }), this.telInput.on("keyup" + this.ns, function (t) {
                if (t.which == d || r.telInput.prop("readonly"));
                else if (r.options.autoFormat && l.intlTelInputUtils) {
                    var i = r.isGoodBrowser && r.telInput[0].selectionStart == r.telInput.val().length;
                    r.telInput.val() ? (t.which != I || i) && t.which != a || r._handleInputKey() : r._updateFlagFromNumber(""), r._ensurePlus()
                } else r._updateFlagFromNumber(r.telInput.val())
            })
        },
        _ensurePlus: function () {
            if (!this.options.nationalMode) {
                var t = this.telInput.val(),
                    i = this.telInput[0];
                if ("+" != t.charAt(0)) {
                    var e = this.isGoodBrowser ? i.selectionStart + 1 : 0;
                    this.telInput.val("+" + t), this.isGoodBrowser && i.setSelectionRange(e, e)
                }
            }
        },
        _handleInvalidKey: function () {
            var t = this;
            this.telInput.trigger("invalidkey").addClass("iti-invalid-key"), setTimeout(function () {
                t.telInput.removeClass("iti-invalid-key")
            }, 100)
        },
        _handleInputKey: function (t, i, e) {
            var n, a, o = this.telInput.val(),
                s = (this._getClean(o), this.telInput[0]),
                r = 0;
            this.isGoodBrowser ? (r = this._getDigitsOnRight(o, s.selectionEnd), t ? o = o.substr(0, s.selectionStart) + t + o.substring(s.selectionEnd, o.length) : n = o.substr(s.selectionStart - 2, 2)) : t && (o += t), this.setNumber(o, null, i, !0, e), this.isGoodBrowser && (o = this.telInput.val(), r ? (a = this._getCursorFromDigitsOnRight(o, r), t || (a = this._getCursorFromLeftChar(o, a, n))) : a = o.length, s.setSelectionRange(a, a))
        },
        _getCursorFromLeftChar: function (t, i, e) {
            for (var n = i; 0 < n; n--) {
                var a = t.charAt(n - 1);
                if (s.isNumeric(a) || t.substr(n - 2, 2) == e) return n
            }
            return 0
        },
        _getCursorFromDigitsOnRight: function (t, i) {
            for (var e = t.length - 1; 0 <= e; e--)
                if (s.isNumeric(t.charAt(e)) && 0 == --i) return e;
            return 0
        },
        _getDigitsOnRight: function (t, i) {
            for (var e = 0, n = i; n < t.length; n++) s.isNumeric(t.charAt(n)) && e++;
            return e
        },
        _initFocusListeners: function () {
            var e = this;
            this.options.autoHideDialCode && this.telInput.on("mousedown" + this.ns, function (t) {
                e.telInput.is(":focus") || e.telInput.val() || (t.preventDefault(), e.telInput.focus())
            }), this.telInput.on("focus" + this.ns, function (t) {
                var i = e.telInput.val();
                e.telInput.data("focusVal", i), e.options.autoHideDialCode && !i && !e.telInput.prop("readonly") && e.selectedCountryData.dialCode && (e._updateVal("+" + e.selectedCountryData.dialCode, null, !0), e.telInput.one("keypress.plus" + e.ns, function (t) {
                    if (t.which == p) {
                        var i = e.options.autoFormat && l.intlTelInputUtils ? "+" : "";
                        e.telInput.val(i)
                    }
                }), setTimeout(function () {
                    var t = e.telInput[0];
                    if (e.isGoodBrowser) {
                        var i = e.telInput.val().length;
                        t.setSelectionRange(i, i)
                    }
                }))
            }), this.telInput.on("blur" + this.ns, function () {
                if (e.options.autoHideDialCode) {
                    var t = e.telInput.val();
                    if ("+" == t.charAt(0)) {
                        var i = e._getNumeric(t);
                        i && e.selectedCountryData.dialCode != i || e.telInput.val("")
                    }
                    e.telInput.off("keypress.plus" + e.ns)
                }
                e.options.autoFormat && l.intlTelInputUtils && e.telInput.val() != e.telInput.data("focusVal") && e.telInput.trigger("change")
            })
        },
        _getNumeric: function (t) {
            return t.replace(/\D/g, "")
        },
        _getClean: function (t) {
            return ("+" == t.charAt(0) ? "+" : "") + this._getNumeric(t)
        },
        _showDropdown: function () {
            this._setDropdownPosition();
            var t = this.countryList.children(".active");
            t.length && this._highlightListItem(t), this.countryList.removeClass("hide"), t.length && this._scrollTo(t), this._bindDropdownListeners(), this.selectedFlagInner.children(".arrow").addClass("up")
        },
        _setDropdownPosition: function () {
            var t = this.telInput.offset().top,
                i = s(l).scrollTop(),
                e = t + this.telInput.outerHeight() + this.dropdownHeight < i + s(l).height(),
                n = t - this.dropdownHeight > i,
                a = !e && n ? "-" + (this.dropdownHeight - 1) + "px" : "";
            this.countryList.css("top", a)
        },
        _bindDropdownListeners: function () {
            var i = this;
            this.countryList.on("mouseover" + this.ns, ".country", function (t) {
                i._highlightListItem(s(this))
            }), this.countryList.on("click" + this.ns, ".country", function (t) {
                i._selectListItem(s(this))
            });
            var e = !0;
            s("html").on("click" + this.ns, function (t) {
                e || i._closeDropdown(), e = !1
            });
            var n = "",
                a = null;
            s(t).on("keydown" + this.ns, function (t) {
                t.preventDefault(), t.which == u || t.which == h ? i._handleUpDownKey(t.which) : t.which == d ? i._handleEnterKey() : t.which == c ? i._closeDropdown() : (t.which >= f && t.which <= g || t.which == C) && (a && clearTimeout(a), n += String.fromCharCode(t.which), i._searchForCountry(n), a = setTimeout(function () {
                    n = ""
                }, 1e3))
            })
        },
        _handleUpDownKey: function (t) {
            var i = this.countryList.children(".highlight").first(),
                e = t == u ? i.prev() : i.next();
            e.length && (e.hasClass("divider") && (e = t == u ? e.prev() : e.next()), this._highlightListItem(e), this._scrollTo(e))
        },
        _handleEnterKey: function () {
            var t = this.countryList.children(".highlight").first();
            t.length && this._selectListItem(t)
        },
        _searchForCountry: function (t) {
            for (var i = 0; i < this.countries.length; i++)
                if (this._startsWith(this.countries[i].name, t)) {
                    var e = this.countryList.children("[data-country-code=" + this.countries[i].iso2 + "]").not(".preferred");
                    this._highlightListItem(e), this._scrollTo(e, !0);
                    break
                }
        },
        _startsWith: function (t, i) {
            return t.substr(0, i.length).toUpperCase() == i
        },
        _updateVal: function (t, i, e, n, a) {
            var o;
            if (this.options.autoFormat && l.intlTelInputUtils && this.selectedCountryData) {
                o = "number" == typeof i && intlTelInputUtils.isValidNumber(t, this.selectedCountryData.iso2) ? intlTelInputUtils.formatNumberByType(t, this.selectedCountryData.iso2, i) : !n && this.options.nationalMode && "+" == t.charAt(0) && intlTelInputUtils.isValidNumber(t, this.selectedCountryData.iso2) ? intlTelInputUtils.formatNumberByType(t, this.selectedCountryData.iso2, intlTelInputUtils.numberFormat.NATIONAL) : intlTelInputUtils.formatNumber(t, this.selectedCountryData.iso2, e, this.options.allowExtensions, a);
                var s = this.telInput.attr("maxlength");
                s && o.length > s && (o = o.substr(0, s))
            } else o = t;
            this.telInput.val(o)
        },
        _updateFlagFromNumber: function (t, i) {
            t && this.options.nationalMode && this.selectedCountryData && "1" == this.selectedCountryData.dialCode && "+" != t.charAt(0) && ("1" != t.charAt(0) && (t = "1" + t), t = "+" + t);
            var e = this._getDialCode(t),
                n = null;
            if (e) {
                var a = this.countryCodes[this._getNumeric(e)];
                if (!(this.selectedCountryData && -1 != s.inArray(this.selectedCountryData.iso2, a)) || this._isUnknownNanp(t, e))
                    for (var o = 0; o < a.length; o++)
                        if (a[o]) {
                            n = a[o];
                            break
                        }
            } else "+" == t.charAt(0) && this._getNumeric(t).length ? n = "" : t && "+" != t || (n = this.options.defaultCountry.iso2);
            null !== n && this._selectFlag(n, i)
        },
        _isUnknownNanp: function (t, i) {
            return "+1" == i && 4 <= this._getNumeric(t).length
        },
        _highlightListItem: function (t) {
            this.countryListItems.removeClass("highlight"), t.addClass("highlight")
        },
        _getCountryData: function (t, i, e) {
            for (var n = i ? _ : this.countries, a = 0; a < n.length; a++)
                if (n[a].iso2 == t) return n[a];
            if (e) return null;
            throw new Error("No country data for '" + t + "'")
        },
        _selectFlag: function (t, i) {
            this.selectedCountryData = t ? this._getCountryData(t, !1, !1) : {}, i && this.selectedCountryData.iso2 && (this.options.defaultCountry = {
                iso2: this.selectedCountryData.iso2
            }), this.selectedFlagInner.attr("class", "iti-flag " + t);
            var e = t ? this.selectedCountryData.name + ": +" + this.selectedCountryData.dialCode : "Unknown";
            this.selectedFlagInner.parent().attr("title", e), this._updatePlaceholder(), this.isMobile ? this.countryList.val(t) : (this.countryListItems.removeClass("active"), t && this.countryListItems.find(".iti-flag." + t).first().closest(".country").addClass("active"))
        },
        _updatePlaceholder: function () {
            if (l.intlTelInputUtils && !this.hadInitialPlaceholder && this.options.autoPlaceholder && this.selectedCountryData) {
                var t = this.selectedCountryData.iso2,
                    i = intlTelInputUtils.numberType[this.options.numberType || "FIXED_LINE"],
                    e = t ? intlTelInputUtils.getExampleNumber(t, this.options.nationalMode, i) : "";
                "function" == typeof this.options.customPlaceholder && (e = this.options.customPlaceholder(e, this.selectedCountryData)), this.telInput.attr("placeholder", e)
            }
        },
        _selectListItem: function (t) {
            var i = this.isMobile ? "value" : "data-country-code";
            if (this._selectFlag(t.attr(i), !0), this.isMobile || this._closeDropdown(), this._updateDialCode(t.attr("data-dial-code"), !0), this.telInput.trigger("change"), this.telInput.focus(), this.isGoodBrowser) {
                var e = this.telInput.val().length;
                this.telInput[0].setSelectionRange(e, e)
            }
        },
        _closeDropdown: function () {
            this.countryList.addClass("hide"), this.selectedFlagInner.children(".arrow").removeClass("up"), s(t).off(this.ns), s("html").off(this.ns), this.countryList.off(this.ns)
        },
        _scrollTo: function (t, i) {
            var e = this.countryList,
                n = e.height(),
                a = e.offset().top,
                o = a + n,
                s = t.outerHeight(),
                r = t.offset().top,
                l = r + s,
                u = r - a + e.scrollTop(),
                h = n / 2 - s / 2;
            if (r < a) i && (u -= h), e.scrollTop(u);
            else if (o < l) {
                i && (u += h);
                var d = n - s;
                e.scrollTop(u - d)
            }
        },
        _updateDialCode: function (t, i) {
            var e, n = this.telInput.val();
            if (t = "+" + t, this.options.nationalMode && "+" != n.charAt(0)) e = n;
            else if (n) {
                var a = this._getDialCode(n);
                if (1 < a.length) e = n.replace(a, t);
                else e = t + ("+" != n.charAt(0) ? s.trim(n) : "")
            } else e = !this.options.autoHideDialCode || i ? t : "";
            this._updateVal(e, null, i)
        },
        _getDialCode: function (t) {
            var i = "";
            if ("+" == t.charAt(0))
                for (var e = "", n = 0; n < t.length; n++) {
                    var a = t.charAt(n);
                    if (s.isNumeric(a) && (e += a, this.countryCodes[e] && (i = t.substr(0, n + 1)), 4 == e.length)) break
                }
            return i
        },
        autoCountryLoaded: function () {
            "auto" == this.options.defaultCountry && (this.options.defaultCountry = s.fn[r].autoCountry, this._setInitialState(), this.autoCountryDeferred.resolve())
        },
        destroy: function () {
            this.isMobile || this._closeDropdown(), this.telInput.off(this.ns), this.isMobile ? this.countryList.off(this.ns) : (this.selectedFlagInner.parent().off(this.ns), this.telInput.closest("label").off(this.ns)), this.telInput.parent().before(this.telInput).remove()
        },
        getExtension: function () {
            return this.telInput.val().split(" ext. ")[1] || ""
        },
        getNumber: function (t) {
            return l.intlTelInputUtils ? intlTelInputUtils.formatNumberByType(this.telInput.val(), this.selectedCountryData.iso2, t) : ""
        },
        getNumberType: function () {
            return l.intlTelInputUtils ? intlTelInputUtils.getNumberType(this.telInput.val(), this.selectedCountryData.iso2) : -99
        },
        getSelectedCountryData: function () {
            return this.selectedCountryData || {}
        },
        getValidationError: function () {
            return l.intlTelInputUtils ? intlTelInputUtils.getValidationError(this.telInput.val(), this.selectedCountryData.iso2) : -99
        },
        isValidNumber: function () {
            var t = s.trim(this.telInput.val()),
                i = this.options.nationalMode ? this.selectedCountryData.iso2 : "";
            return !!l.intlTelInputUtils && intlTelInputUtils.isValidNumber(t, i)
        },
        loadUtils: function (t) {
            var i = this,
                e = t || this.options.utilsScript;
            !s.fn[r].loadedUtilsScript && e ? (s.fn[r].loadedUtilsScript = !0, s.ajax({
                url: e,
                success: function () {
                    s(".intl-tel-input input").intlTelInput("utilsLoaded")
                },
                complete: function () {
                    i.utilsScriptDeferred.resolve()
                },
                dataType: "script",
                cache: !0
            })) : this.utilsScriptDeferred.resolve()
        },
        selectCountry: function (t) {
            t = t.toLowerCase(), this.selectedFlagInner.hasClass(t) || (this._selectFlag(t, !0), this._updateDialCode(this.selectedCountryData.dialCode, !1))
        },
        setNumber: function (t, i, e, n, a) {
            this.options.nationalMode || "+" == t.charAt(0) || (t = "+" + t), this._updateFlagFromNumber(t), this._updateVal(t, i, e, n, a)
        },
        utilsLoaded: function () {
            this.options.autoFormat && this.telInput.val() && this._updateVal(this.telInput.val()), this._updatePlaceholder()
        }
    }, s.fn[r] = function (e) {
        var i, n = arguments;
        if (e === o || "object" === (void 0 === e ? "undefined" : _typeof(e))) {
            var a = [];
            return this.each(function () {
                if (!s.data(this, "plugin_" + r)) {
                    var t = new b(this, e),
                        i = t._init();
                    a.push(i[0]), a.push(i[1]), s.data(this, "plugin_" + r, t)
                }
            }), s.when.apply(null, a)
        }
        if ("string" == typeof e && "_" !== e[0]) return this.each(function () {
            var t = s.data(this, "plugin_" + r);
            t instanceof b && "function" == typeof t[e] && (i = t[e].apply(t, Array.prototype.slice.call(n, 1))), "destroy" === e && s.data(this, "plugin_" + r, null)
        }), i !== o ? i : this
    }, s.fn[r].getCountryData = function () {
        return _
    }, s.fn[r].version = "6.0.8";
    for (var _ = [
            ["Afghanistan (‫افغانستان‬‎)", "af", "93"],
            ["Albania (Shqipëri)", "al", "355"],
            ["Algeria (‫الجزائر‬‎)", "dz", "213"],
            ["American Samoa", "as", "1684"],
            ["Andorra", "ad", "376"],
            ["Angola", "ao", "244"],
            ["Anguilla", "ai", "1264"],
            ["Antigua and Barbuda", "ag", "1268"],
            ["Argentina", "ar", "54"],
            ["Armenia (Հայաստան)", "am", "374"],
            ["Aruba", "aw", "297"],
            ["Australia", "au", "61"],
            ["Austria (Österreich)", "at", "43"],
            ["Azerbaijan (Azərbaycan)", "az", "994"],
            ["Bahamas", "bs", "1242"],
            ["Bahrain (‫البحرين‬‎)", "bh", "973"],
            ["Bangladesh (বাংলাদেশ)", "bd", "880"],
            ["Barbados", "bb", "1246"],
            ["Belarus (Беларусь)", "by", "375"],
            ["Belgium (België)", "be", "32"],
            ["Belize", "bz", "501"],
            ["Benin (Bénin)", "bj", "229"],
            ["Bermuda", "bm", "1441"],
            ["Bhutan (འབྲུག)", "bt", "975"],
            ["Bolivia", "bo", "591"],
            ["Bosnia and Herzegovina (Босна и Херцеговина)", "ba", "387"],
            ["Botswana", "bw", "267"],
            ["Brazil (Brasil)", "br", "55"],
            ["British Indian Ocean Territory", "io", "246"],
            ["British Virgin Islands", "vg", "1284"],
            ["Brunei", "bn", "673"],
            ["Bulgaria (България)", "bg", "359"],
            ["Burkina Faso", "bf", "226"],
            ["Burundi (Uburundi)", "bi", "257"],
            ["Cambodia (កម្ពុជា)", "kh", "855"],
            ["Cameroon (Cameroun)", "cm", "237"],
            ["Canada", "ca", "1", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]],
            ["Cape Verde (Kabu Verdi)", "cv", "238"],
            ["Caribbean Netherlands", "bq", "599", 1],
            ["Cayman Islands", "ky", "1345"],
            ["Central African Republic (République centrafricaine)", "cf", "236"],
            ["Chad (Tchad)", "td", "235"],
            ["Chile", "cl", "56"],
            ["China (中国)", "cn", "86"],
            ["Colombia", "co", "57"],
            ["Comoros (‫جزر القمر‬‎)", "km", "269"],
            ["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243"],
            ["Congo (Republic) (Congo-Brazzaville)", "cg", "242"],
            ["Cook Islands", "ck", "682"],
            ["Costa Rica", "cr", "506"],
            ["Côte d’Ivoire", "ci", "225"],
            ["Croatia (Hrvatska)", "hr", "385"],
            ["Cuba", "cu", "53"],
            ["Curaçao", "cw", "599", 0],
            ["Cyprus (Κύπρος)", "cy", "357"],
            ["Czech Republic (Česká republika)", "cz", "420"],
            ["Denmark (Danmark)", "dk", "45"],
            ["Djibouti", "dj", "253"],
            ["Dominica", "dm", "1767"],
            ["Dominican Republic (República Dominicana)", "do", "1", 2, ["809", "829", "849"]],
            ["Ecuador", "ec", "593"],
            ["Egypt (‫مصر‬‎)", "eg", "20"],
            ["El Salvador", "sv", "503"],
            ["Equatorial Guinea (Guinea Ecuatorial)", "gq", "240"],
            ["Eritrea", "er", "291"],
            ["Estonia (Eesti)", "ee", "372"],
            ["Ethiopia", "et", "251"],
            ["Falkland Islands (Islas Malvinas)", "fk", "500"],
            ["Faroe Islands (Føroyar)", "fo", "298"],
            ["Fiji", "fj", "679"],
            ["Finland (Suomi)", "fi", "358"],
            ["France", "fr", "33"],
            ["French Guiana (Guyane française)", "gf", "594"],
            ["French Polynesia (Polynésie française)", "pf", "689"],
            ["Gabon", "ga", "241"],
            ["Gambia", "gm", "220"],
            ["Georgia (საქართველო)", "ge", "995"],
            ["Germany (Deutschland)", "de", "49"],
            ["Ghana (Gaana)", "gh", "233"],
            ["Gibraltar", "gi", "350"],
            ["Greece (Ελλάδα)", "gr", "30"],
            ["Greenland (Kalaallit Nunaat)", "gl", "299"],
            ["Grenada", "gd", "1473"],
            ["Guadeloupe", "gp", "590", 0],
            ["Guam", "gu", "1671"],
            ["Guatemala", "gt", "502"],
            ["Guinea (Guinée)", "gn", "224"],
            ["Guinea-Bissau (Guiné Bissau)", "gw", "245"],
            ["Guyana", "gy", "592"],
            ["Haiti", "ht", "509"],
            ["Honduras", "hn", "504"],
            ["Hong Kong (香港)", "hk", "852"],
            ["Hungary (Magyarország)", "hu", "36"],
            ["Iceland (Ísland)", "is", "354"],
            ["India (भारत)", "in", "91"],
            ["Indonesia", "id", "62"],
            ["Iran (‫ایران‬‎)", "ir", "98"],
            ["Iraq (‫العراق‬‎)", "iq", "964"],
            ["Ireland", "ie", "353"],
            ["Israel (‫ישראל‬‎)", "il", "972"],
            ["Italy (Italia)", "it", "39", 0],
            ["Jamaica", "jm", "1876"],
            ["Japan (日本)", "jp", "81"],
            ["Jordan (‫الأردن‬‎)", "jo", "962"],
            ["Kazakhstan (Казахстан)", "kz", "7", 1],
            ["Kenya", "ke", "254"],
            ["Kiribati", "ki", "686"],
            ["Kuwait (‫الكويت‬‎)", "kw", "965"],
            ["Kyrgyzstan (Кыргызстан)", "kg", "996"],
            ["Laos (ລາວ)", "la", "856"],
            ["Latvia (Latvija)", "lv", "371"],
            ["Lebanon (‫لبنان‬‎)", "lb", "961"],
            ["Lesotho", "ls", "266"],
            ["Liberia", "lr", "231"],
            ["Libya (‫ليبيا‬‎)", "ly", "218"],
            ["Liechtenstein", "li", "423"],
            ["Lithuania (Lietuva)", "lt", "370"],
            ["Luxembourg", "lu", "352"],
            ["Macau (澳門)", "mo", "853"],
            ["Macedonia (FYROM) (Македонија)", "mk", "389"],
            ["Madagascar (Madagasikara)", "mg", "261"],
            ["Malawi", "mw", "265"],
            ["Malaysia", "my", "60"],
            ["Maldives", "mv", "960"],
            ["Mali", "ml", "223"],
            ["Malta", "mt", "356"],
            ["Marshall Islands", "mh", "692"],
            ["Martinique", "mq", "596"],
            ["Mauritania (‫موريتانيا‬‎)", "mr", "222"],
            ["Mauritius (Moris)", "mu", "230"],
            ["Mexico (México)", "mx", "52"],
            ["Micronesia", "fm", "691"],
            ["Moldova (Republica Moldova)", "md", "373"],
            ["Monaco", "mc", "377"],
            ["Mongolia (Монгол)", "mn", "976"],
            ["Montenegro (Crna Gora)", "me", "382"],
            ["Montserrat", "ms", "1664"],
            ["Morocco (‫المغرب‬‎)", "ma", "212"],
            ["Mozambique (Moçambique)", "mz", "258"],
            ["Myanmar (Burma) (မြန်မာ)", "mm", "95"],
            ["Namibia (Namibië)", "na", "264"],
            ["Nauru", "nr", "674"],
            ["Nepal (नेपाल)", "np", "977"],
            ["Netherlands (Nederland)", "nl", "31"],
            ["New Caledonia (Nouvelle-Calédonie)", "nc", "687"],
            ["New Zealand", "nz", "64"],
            ["Nicaragua", "ni", "505"],
            ["Niger (Nijar)", "ne", "227"],
            ["Nigeria", "ng", "234"],
            ["Niue", "nu", "683"],
            ["Norfolk Island", "nf", "672"],
            ["North Korea (조선 민주주의 인민 공화국)", "kp", "850"],
            ["Northern Mariana Islands", "mp", "1670"],
            ["Norway (Norge)", "no", "47"],
            ["Oman (‫عُمان‬‎)", "om", "968"],
            ["Pakistan (‫پاکستان‬‎)", "pk", "92"],
            ["Palau", "pw", "680"],
            ["Palestine (‫فلسطين‬‎)", "ps", "970"],
            ["Panama (Panamá)", "pa", "507"],
            ["Papua New Guinea", "pg", "675"],
            ["Paraguay", "py", "595"],
            ["Peru (Perú)", "pe", "51"],
            ["Philippines", "ph", "63"],
            ["Poland (Polska)", "pl", "48"],
            ["Portugal", "pt", "351"],
            ["Puerto Rico", "pr", "1", 3, ["787", "939"]],
            ["Qatar (‫قطر‬‎)", "qa", "974"],
            ["Réunion (La Réunion)", "re", "262"],
            ["Romania (România)", "ro", "40"],
            ["Russia (Россия)", "ru", "7", 0],
            ["Rwanda", "rw", "250"],
            ["Saint Barthélemy (Saint-Barthélemy)", "bl", "590", 1],
            ["Saint Helena", "sh", "290"],
            ["Saint Kitts and Nevis", "kn", "1869"],
            ["Saint Lucia", "lc", "1758"],
            ["Saint Martin (Saint-Martin (partie française))", "mf", "590", 2],
            ["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508"],
            ["Saint Vincent and the Grenadines", "vc", "1784"],
            ["Samoa", "ws", "685"],
            ["San Marino", "sm", "378"],
            ["São Tomé and Príncipe (São Tomé e Príncipe)", "st", "239"],
            ["Saudi Arabia (‫المملكة العربية السعودية‬‎)", "sa", "966"],
            ["Senegal (Sénégal)", "sn", "221"],
            ["Serbia (Србија)", "rs", "381"],
            ["Seychelles", "sc", "248"],
            ["Sierra Leone", "sl", "232"],
            ["Singapore", "sg", "65"],
            ["Sint Maarten", "sx", "1721"],
            ["Slovakia (Slovensko)", "sk", "421"],
            ["Slovenia (Slovenija)", "si", "386"],
            ["Solomon Islands", "sb", "677"],
            ["Somalia (Soomaaliya)", "so", "252"],
            ["South Africa", "za", "27"],
            ["South Korea (대한민국)", "kr", "82"],
            ["South Sudan (‫جنوب السودان‬‎)", "ss", "211"],
            ["Spain (España)", "es", "34"],
            ["Sri Lanka (ශ්‍රී ලංකාව)", "lk", "94"],
            ["Sudan (‫السودان‬‎)", "sd", "249"],
            ["Suriname", "sr", "597"],
            ["Swaziland", "sz", "268"],
            ["Sweden (Sverige)", "se", "46"],
            ["Switzerland (Schweiz)", "ch", "41"],
            ["Syria (‫سوريا‬‎)", "sy", "963"],
            ["Taiwan (台灣)", "tw", "886"],
            ["Tajikistan", "tj", "992"],
            ["Tanzania", "tz", "255"],
            ["Thailand (ไทย)", "th", "66"],
            ["Timor-Leste", "tl", "670"],
            ["Togo", "tg", "228"],
            ["Tokelau", "tk", "690"],
            ["Tonga", "to", "676"],
            ["Trinidad and Tobago", "tt", "1868"],
            ["Tunisia (‫تونس‬‎)", "tn", "216"],
            ["Turkey (Türkiye)", "tr", "90"],
            ["Turkmenistan", "tm", "993"],
            ["Turks and Caicos Islands", "tc", "1649"],
            ["Tuvalu", "tv", "688"],
            ["U.S. Virgin Islands", "vi", "1340"],
            ["Uganda", "ug", "256"],
            ["Ukraine (Україна)", "ua", "380"],
            ["United Arab Emirates (‫الإمارات العربية المتحدة‬‎)", "ae", "971"],
            ["United Kingdom", "gb", "44"],
            ["United States", "us", "1", 0],
            ["Uruguay", "uy", "598"],
            ["Uzbekistan (Oʻzbekiston)", "uz", "998"],
            ["Vanuatu", "vu", "678"],
            ["Vatican City (Città del Vaticano)", "va", "39", 1],
            ["Venezuela", "ve", "58"],
            ["Vietnam (Việt Nam)", "vn", "84"],
            ["Wallis and Futuna", "wf", "681"],
            ["Yemen (‫اليمن‬‎)", "ye", "967"],
            ["Zambia", "zm", "260"],
            ["Zimbabwe", "zw", "263"]
        ], w = 0; w < _.length; w++) {
        var D = _[w];
        _[w] = {
            name: D[0],
            iso2: D[1],
            dialCode: D[2],
            priority: D[3] || 0,
            areaCodes: D[4] || null
        }
    }
});